#!/bin/bash
# shellcheck disable=SC2155

readonly THISDIR=$(dirname "$0")
readonly TIMETAG="$(date +%Y%m%d%H%M)"
readonly PACKAGES=(moulinette SSOwat yunohost yunohost-admin yunohost-portal)
readonly DISTRIBS=(trixie)
readonly FORCE="false"

source "$THISDIR/config/config"
mkdir -p "$LAST_BUILDS_CACHE"

function main()
{

    for PACKAGE in "${PACKAGES[@]}"; do
        for DISTRIB in "${DISTRIBS[@]}"; do
            echo "-------------------------------------"
            echo "Looking for update in ${PACKAGE} for ${DISTRIB}... "

            build_if_needed "$PACKAGE" "$DISTRIB"
        done
    done
    echo "-------------------------------------"
}


function build_if_needed()
{
    local PACKAGE=$1
    local DISTRIB=$2
    local LAST_BUILD_FOR_THIS_PACKAGE=$LAST_BUILDS_CACHE/${DISTRIB}_${PACKAGE}

    [[ $DISTRIB == "bookworm" ]] && BRANCH_NIGHTLY="dev"
    [[ $DISTRIB == "trixie" ]] && BRANCH_NIGHTLY="trixie"

    cd "$GIT_REPOS/$PACKAGE" || exit 1

    git fetch origin >/dev/null 2>/dev/null

    git checkout "$BRANCH_NIGHTLY" >/dev/null 2>/dev/null
    git pull origin "$BRANCH_NIGHTLY" >/dev/null 2>/dev/null
    git reset --hard "origin/$BRANCH_NIGHTLY"

    # Check if build is needed

    if [ -e "$LAST_BUILD_FOR_THIS_PACKAGE" ]
    then
        TIMESTAMP_LASTBUILD=$(stat -c %Y "$LAST_BUILD_FOR_THIS_PACKAGE")
    else
        TIMESTAMP_LASTBUILD=0
    fi
    TIMESTAMP_HEAD=$(git show -s --format=%ct HEAD)

    if [ "$TIMESTAMP_HEAD" -lt "$TIMESTAMP_LASTBUILD" ]
    then
    if ! "$FORCE";
    then
        echo "Sources up-to-date, nothing to build."
        return
    else
        echo "Sources up-to-date but forcing build anyway."
    fi
    fi

    VERSION=$(dpkg-parsechangelog -S Version 2>/dev/null)
    VERSION_NIGHTLY="${VERSION}+${TIMETAG}"

    # Tweak the changelog temporarily
    echo "> Setting version in changelog to ${VERSION_NIGHTLY}"
    rm -f debian/changelog.dch
    cp debian/changelog debian/changelog.old
    dch --package "${PACKAGE}" \
        --force-bad-version \
        -v "${VERSION_NIGHTLY}" \
        -D "unstable" \
        --force-distribution \
        "Daily build." \
        > /dev/null 2>&1

    head -n 5 debian/changelog

    # Launch the build using build_deb script
    build

    touch "$LAST_BUILD_FOR_THIS_PACKAGE"

    # Restore changelog
    echo "> Restoring previous changelog"
    cd "$GIT_REPOS/$PACKAGE" || exit 1
    cp debian/changelog.old debian/changelog
    rm debian/changelog.old

}

function build()
{
    # Create temporary folder
    TMP_FOLDER=$(mktemp -d)

    #Â Move files to a tmp folder
    echo "> Exporting in $TMP_FOLDER ...  "
    git ls-files | xargs tar -czf archive.tar.gz
    tar xzf archive.tar.gz -C "$TMP_FOLDER"
    rm archive.tar.gz

    # Build Debian package
    echo "> Starting build ..."
    cd "$TMP_FOLDER" || exit 1
    $BUILD_DEB "$DISTRIB" "unstable" .
}

main
