#!/usr/bin/env bash
set -Eeuo pipefail

readonly THISSCRIPT=$0
SCRIPT_DIR=$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)
readonly SCRIPT_DIR

source "$SCRIPT_DIR/libvinaigrette/buildutils"
source "$SCRIPT_DIR/libvinaigrette/chroots"
source "$SCRIPT_DIR/libvinaigrette/config"
source "$SCRIPT_DIR/libvinaigrette/debutils"
source "$SCRIPT_DIR/libvinaigrette/gitutils"
source "$SCRIPT_DIR/libvinaigrette/logging"
source "$SCRIPT_DIR/libvinaigrette/scriptutils"

# Set some path variables

readonly CONFIG_DIR="$SCRIPT_DIR/config"
readonly DATA_DIR="$SCRIPT_DIR/data"
readonly GIT_REPOS_DIR="$DATA_DIR/git_repos"
readonly CHROOTS_DIR="$DATA_DIR/chroots"
readonly BUILDS_DIR="$DATA_DIR/builds"
readonly REPO_DIR="$SCRIPT_DIR/../www/debian"

usage() {
    cat << EOF
Usage:
    $THISSCRIPT <package> <branch> <version>

Arguments:
    <package>   $(array_print_sep ", " "${PACKAGES[@]}")
    <branch>    testing or stable
    <version>   x.y.z (ex: 2.6.1)
EOF
}

setargs() {
    if (( "$#" != "3" )); then
        critical "Error: expecting 3 arguments."
        return 1
    fi
    PACKAGE=$1
    BRANCH=$2
    VERSION=$3

    case "$VERSION" in
        11.*) readonly DEBIAN_REL="bullseye" ;;
        12.*) readonly DEBIAN_REL="bookworm" ;;
        13.*) readonly DEBIAN_REL="trixie" ;;
        *)  critical "Version should be 11.*, 12.* or 13.* !" ; return 1 ;;
    esac

    if ! array_contains_element "$PACKAGE" "${PACKAGES[@]}" ; then
        critical "Invalid package $PACKAGE"
        return 1
    fi
    if ! grep -q "^Codename: $DEBIAN_REL$" "$CONFIG_DIR/distributions"; then
        critical "Invalid Debian release $DEBIAN_REL"
        return 1
    fi
    if ! grep -q "^Components: .*$BRANCH.*$" "$CONFIG_DIR/distributions"; then
        critical "Invalid branch $BRANCH"
        return 1
    fi
    if [[ -z "$VERSION" ]]; then
        critical "Invalid version $VERSION"
        return 1
    fi
}

validate_git_tag() {
    local repo=$1
    local tag=$2

    if ! git_assert_tag_is_head "$repo" "$tag"; then
        critical "Tag $tag is not the HEAD of the branch :/"
        return 1
    fi
    if [[ "$VERSION" != "$(debian_version "$repo")" ]]; then
        critical "Version $VERSION is not the last version in changelog"
        return 1
    fi
}
validate_branch() {
    local repo=$1
    # check if the build branch type is coherent between what the user has specified and what is specified in the changelog
    if ! [[ "$(head -n 1 "$repo/debian/changelog")" == *"$BRANCH"* ]]; then
       error "The specified branch is not coherent with the changelog one!"
       exit 1
    fi
}

main() {
    if ! setargs "$@"; then
        usage
        exit 1
    fi

    if [[ "$(tty)" == "not a tty" ]]; then
        critical "You aint in a tty (are you in a 'lxc exec' ?) The script can't run because pbuilder won't be happy :|"
    fi

    make_chroot "$DEBIAN_REL"

    boxed "Building $PACKAGE $BRANCH release - $VERSION version"

    local repo=$GIT_REPOS_DIR/$PACKAGE
    boxed "> Updating $repo repository..."
    local tag
    tag=$(echo "debian/$VERSION" | tr '~' '-')
    local url="${PROJECT_URLS[$PACKAGE]}"
    git_fetch "$repo" "$url"
    if ! git_tag_exists "$repo" "$tag"; then
        critical "Invalid version $VERSION (there's no tag $tag in the git repo !)"
    fi
    git_checkout_tag "$repo" "$tag"
    validate_git_tag "$repo" "$tag"
    validate_branch "$repo"

    # Create temporary directory, delete it on exit
    local tmp_dir
    mkdir -p "$BUILDS_DIR"
    tmp_dir="$(mktemp -d -p "$BUILDS_DIR/" --suffix="-$PACKAGE-$BRANCH-$VERSION")"
    trap 'rm -rf -- "'"$tmp_dir"'"' EXIT

    info "Exporting in ${tmp_dir}..."
    setup_tmpdir "$repo" "$tmp_dir"

    boxed "Building Debian package..."

    build_package_all_archs "$tmp_dir" "$DEBIAN_REL" "$PACKAGE" "$VERSION" "$BRANCH"

    distribute_package_all_archs "$REPO_DIR" "$tmp_dir" "$DEBIAN_REL" "$PACKAGE" "$VERSION" "$BRANCH"

    rm -r "$tmp_dir"
    trap '' EXIT
}

main_unstable() {
    local force=false

    if is_already_running; then
        error "$0 is already running!"
        exit 0
    fi

    # Create temporary directory, delete it on exit
    local tmp_main_dir
    mkdir -p "$BUILDS_DIR"
    tmp_main_dir="$(mktemp -d -p "$BUILDS_DIR/" --suffix="-unstable")"
    trap 'rm -rf -- "'"$tmp_main_dir"'"' EXIT

    local package debian_codename
    for package in "${PACKAGES[@]}"; do
        for debian_codename in "${!UNSTABLE_PROJECT_BRANCHES[@]}"; do
            make_chroot "$debian_codename"

            info "-------------------------------------"
            info "Looking for update in ${package} for ${debian_codename}..."

            local repo=$GIT_REPOS_DIR/$package
            local url="${PROJECT_URLS[$package]}"
            git_fetch "$repo" "$url"

            local gitbranch="${UNSTABLE_PROJECT_BRANCHES[$debian_codename]}"
            git_checkout_branch "$repo" "$gitbranch"

            local flag_file="$DATA_DIR/${debian_codename}_${package}.timestamp"
            if ! check_build_needed "$repo" "$flag_file"; then
                if [[ "$force" == "true" ]]; then
                    warn "Sources up-to-date but forcing build anyway."
                else
                    info "Sources up-to-date, nothing to build."
                    continue
                fi
            fi

            local version
            version=$(debian_get_daily_version "$repo")

            debian_changelog_set_daily_version "$repo" "$version"

            tmp_dir="$tmp_main_dir/$package-$debian_codename"
            info "Exporting in ${tmp_dir}..."
            setup_tmpdir "$repo" "$tmp_dir"

            build_package_all_archs "$tmp_dir" "$debian_codename" "$package" "$version" "unstable"

            package_source_name="$(debian_source "$tmp_dir/sources")"
            distribute_package_all_archs "$REPO_DIR" "$tmp_dir" "$debian_codename" "$package" "$package_source_name" "$version" "unstable"

            debian_changelog_revert "$repo"
            set_build_needed_timestamp "$repo" "$flag_file"

        done
    done
    info "-------------------------------------"

    rm -r "$tmp_main_dir"
    trap '' EXIT
    cleanup_pidfile
}

main_wrap() {
    if [[ "${1:-}" == "rebuild-unstable" ]]; then
        main_unstable "${@:2}"
    else
        main "$@"
    fi
}

main_wrap "$@"
