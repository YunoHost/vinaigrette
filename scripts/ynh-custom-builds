#!/bin/bash
# shellcheck disable=SC2155,SC2034

readonly THISSCRIPT=$0
readonly THISDIR=$(dirname "$0")
readonly PACKAGE=$1
readonly BRANCH=$2
readonly DISTRIB="bookworm"
readonly DISTRIB_N="12"

# shellcheck source=config/config
source "$THISDIR/../config/config"
# shellcheck source=scripts/common.sh
source "$THISDIR/common.sh"

# ##### #
# Usage #
# ##### #

function usage()
{
    cat << EOF

Usage:
  $THISSCRIPT <project> <branch>

Arguments:
  <project>     metronome or other project name to be built
  <branch>      stable, testing or unstable

EOF
}

function main()
{
    validate_arguments
    cd "$GIT_REPOS/$PACKAGE" || exit 1
    "tweak_$PACKAGE"
    build
}

# ################# #
# Check user inputs #
# ################# #

function validate_arguments()
{
    [[ $PACKAGE =~ ^metronome|python-zeroconf|lexicon$ ]] || critical "Invalid package $PACKAGE"
    [[ $BRANCH =~ ^testing|stable|unstable$ ]] || critical "Invalid branch $BRANCH"
    [[ "$(tty)" != "not a tty" ]] || critical "You aint in a tty (are you in a 'lxc exec' ?) The script can't run because pbuilder won't be happy :|"
}

# ##################### #
# Build recipe / tweaks #
# ##################### #

function tweak_python-zeroconf()
{
    readonly VERSION="$(dpkg-parsechangelog -S Version 2>/dev/null)+ynh$DISTRIB_N"
}

function tweak_lexicon()
{
    readonly VERSION="$(dpkg-parsechangelog -S Version 2>/dev/null)+ynh$DISTRIB_N-1"
}

#function tweak_miniupnpc()
#{
#    readonly VERSION="$(dpkg-parsechangelog -S Version 2>/dev/null)+ynh$DISTRIB_N"
#}

#function tweak_gevent-websocket()
#{
#    readonly VERSION="$(dpkg-parsechangelog -S Version 2>/dev/null)+ynh$DISTRIB_N"
#}

function tweak_metronome()
{
    readonly VERSION="$(dpkg-parsechangelog -S Version 2>/dev/null)+ynh$DISTRIB_N"
}

function build()
{
    # SVERSION is VERSION without the -1 at the end ...
    local SVERSION=$(echo "$VERSION" | tr '-' ' ' | awk '{print $1}')

    cd "$GIT_REPOS/$PACKAGE" || exit 1

    # Tweak the changelog temporarily
    info "Setting version in changelog to ${VERSION}"
    rm -f debian/changelog.dch
    cp debian/changelog debian/changelog.old
    dch --package "${PACKAGE}" \
        --force-bad-version \
	-v "${VERSION}" \
	-D "${BRANCH}" \
	--force-distribution \
	"YunoHost custom build." \
        > /dev/null 2>&1

    # Create temporary folder
    TMP_FOLDER=$(mktemp -d)

    #Â Extract git archive a desired tag
    info "Exporting in $TMP_FOLDER ...  "
    git ls-files | xargs tar -czf archive.tar.gz
    tar xzf archive.tar.gz -C "$TMP_FOLDER"
    # For some reason, these wants archive named
    # e.g. metronome_x.y.z+stuff.orig.tar.gz
    # in the parent folder...
    mv archive.tar.gz "$TMP_FOLDER/../${PACKAGE}_${SVERSION}.orig.tar.gz"

    # Build Debian package
    cd "$TMP_FOLDER" || exit 1
    $BUILD_DEB $DISTRIB "$BRANCH" .

    # Restore changelog
    info "Restoring previous changelog"
    cd "$GIT_REPOS/$PACKAGE" || exit 1
    cp debian/changelog.old debian/changelog
    rm debian/changelog.old
}

if [[ "$1" =~ ^-h|--help$ ]]; then
    usage
    exit
fi

main
