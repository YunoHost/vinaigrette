#!/usr/bin/env bash

# Fetch remote changes for a gitrepo
git_fetch() {
    local repodir=$1
    local project_url=$2

    if [ -d "$repodir/.git" ]; then
        git -C "$repodir" fetch --quiet
        git -C "$repodir" fetch --tags --quiet --force
    else
        mkdir -p "$(dirname "$repodir")"
        git clone "$project_url" "$repodir"
    fi
}

git_tag_exists() {
    local repodir=$1
    local tag=$2

    git -C "$repodir" rev-parse "$tag" --quiet >/dev/null 2>&1
}

# Checkout TAG on REPO
git_checkout_tag() {
    local repodir=$1
    local tag=$2

    git -C "$repodir" checkout "$tag" --quiet
    git -C "$repodir" reset --hard "$tag" --quiet
}

git_checkout_branch() {
    local repodir=$1
    local branch=$2
    git -C "$repodir" checkout "$branch" --quiet
    git -C "$repodir" reset --hard "origin/$branch" --quiet
}

git_assert_tag_is_head() {
    local repodir=$1
    local tag=$2

    [ "$(git -C "$repodir" rev-parse "$tag")" == "$(git -C "$repodir" rev-parse "HEAD")" ]
}

check_build_needed() {
    local repodir=$1
    local flag_file=$2

    local last_build_commit_time=0
    if [ -f "$flag_file" ]; then
        last_build_commit_time=$(stat -c %Y "$flag_file")
    fi

    local head_commit_time
    head_commit_time=$(git -C "$repodir" show -s --format=%ct HEAD)

    [ "$head_commit_time" -gt "$last_build_commit_time" ]
}

set_build_needed_timestamp() {
    local repodir=$1
    local flag_file=$2
    local head_commit_time
    head_commit_time=$(git -C "$repodir" show -s --format=%ct HEAD)
    touch -d "@$head_commit_time" "$flag_file"
}
