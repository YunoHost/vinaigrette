#!/usr/bin/env bash

setup_tmpdir() {
    local repodir=$1
    local tmp_dir=$2

    # Move files to a tmp folder
    mkdir -p "$tmp_dir/sources"

    local tmp_archive="$tmp_dir/git_archive.tar.gz"
    git -C "$repodir" ls-files | xargs tar -C "$repodir" -czf "$tmp_archive"
    tar xzf "$tmp_archive" -C "$tmp_dir/sources"
    rm "$tmp_archive"
}

build_package() {
    local tmp_dir=$1
    local debian_codename=$2
    local debug=$3
    local arch=$4

    local opts=(
        --dist "$debian_codename"
        --no-run-lintian
        --no-run-piuparts
        --no-run-autopkgtest
    )
    if [[ "$debug" == "debug" ]]; then
        opts+=(--anything-failed-commands='%s')
    fi
    if [[ "$arch" != "all" ]]; then
        opts=(--host "$arch")
    fi

    # Actual build is running here!
    pushd "$tmp_dir/sources" >/dev/null || return 1
        sbuild "${opts[@]}" || return 1
    popd >/dev/null || return 1
}

distribute_package() {
    local tmp_dir=$1
    local repo_dir=$2
    local debian_codename=$3
    local package=$4
    local version=$5
    local branch=$6
    local arch=$7

    reprepro --waitforlock 6 \
        --basedir "$repo_dir" \
        --component "$branch" \
        include "$debian_codename" \
        "$root_dir/${package}_${version}_${arch}.changes"

}

build_package_all_archs() {
    local tmp_dir=$1
    local debian_codename=$2
    local package=$3
    local version=$4
    local branch=$5

    local archs
    archs=$(debian_determinate_archs "$tmp_dir/sources" "$CONFIG_DIR" "${archs:-}")
    # return value
    ARCHS_DONE=()
    for arch in $archs; do
        notify start "Starting build for $package/$version for $debian_codename/$branch/${arch}..."
        if ! build_package "$tmp_dir" "$debian_codename" "nodebug" "$arch"; then
            notify failure "Failed build for $package/$version for $debian_codename/$branch/$arch ?!"
            return 1
        fi
        ARCHS_DONE+=("$arch")
        notify success "Completed build for $package/$version for $debian_codename/$branch/$arch."
    done
}


distribute_package_all_archs() {
    local tmp_dir=$1
    local debian_codename=$2
    local package=$3
    local version=$4
    local branch=$5

    for arch in "${ARCHS_DONE[@]}"; do
        local arch_no_all=$arch
        if [[ "$arch_no_all" == "all" ]]; then
            arch_no_all="amd64"
        fi

        if ! distribute_package "$tmp_dir" "$fixme" "$debian_codename" "$package" "$version" "$branch" "$arch_no_all"; then
            notify failure "Failed to include change of $package/$version for $debian_codename/$branch/$arch ?!"
            return 1
        fi
    done
    notify success "Completed distribution for $package/$version for $debian_codename/${branch}."
}
